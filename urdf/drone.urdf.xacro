<?xml version="1.0"?>


<robot xmlns:xacro="http://wiki.ros.org/xacro" name="drone">
  
  <!-- properties -->
  <xacro:property name="frame_radius" value="0.1"/>
  <xacro:property name="frame_height" value="0.05"/>
  <xacro:property name="frame_mass" value="0.88"/>
  <xacro:property name="arm_radius" value="0.01"/>
  <xacro:property name="arm_length" value="0.15"/>
  <xacro:property name="arm_mass" value="0.01"/>
  <xacro:property name="propeller_radius" value="0.1"/>
  <xacro:property name="propeller_height" value="0.01"/>
  <xacro:property name="propeller_height_offset" value="0.025"/>
  <xacro:property name="propeller_mass" value="0.01"/>

<xacro:macro name="cylinder_inertial" params="radius height mass *origin">
  <inertial>
    <mass value="${mass}"/>
    <xacro:insert_block name="origin"/>
    <inertia 
      ixx="${0.0833333 * mass * (3 * radius * radius + height * height)}"
      ixy="0.0"
      ixz="0.0"
      iyy="${0.0833333 * mass * (3 * radius * radius + height * height)}"
      iyz="0.0"
      izz="${0.5 * mass * radius * radius}"/>
  </inertial>
</xacro:macro>



<link name="drone">
  <visual>
    <origin xyz="0 0 1" rpy="0 0 0"/>
    <geometry>
      <cylinder radius="${frame_radius}" length="${frame_height}"/>
    </geometry>
    <material name="frame_material"/>
  </visual>
  <collision>
    <origin xyz="0 0 1" rpy="0 0 0"/>
    <geometry>
      <cylinder radius="${frame_radius}" length="${frame_height}"/>
    </geometry>
  </collision>
  <xacro:cylinder_inertial radius="${frame_radius}" height="${frame_height}" mass="${frame_mass}">
    <origin xyz="0 0 1" rpy="0 0 0" />
  </xacro:cylinder_inertial>
</link>

<link name="camera_link">
<!-- <inertial>
        <mass>0.1</mass>
      </inertial>
      <collision name="collision">
        <geometry>
          <box>
            <size>0.073000 0.276000 0.072000</size>
          </box>
        </geometry>
      </collision>
      <visual name="visual">
        <geometry>
          <mesh>
            <uri>model://kinect/meshes/kinect.dae</uri>
          </mesh>
        </geometry>
      </visual> -->
  <visual>
  <origin xyz="0 0 1.0" rpy="0 0 -1.5708"/>
    <geometry>
      <box size="0.05 0.05 0.05"/>
    </geometry>
  </visual> 
 <collision>
    <geometry>
      <box size="0.05 0.05 0.05"/>
    </geometry>
  </collision>
  <inertial>
    <mass value="0.0000000001"/>
    <origin rpy="0 0 0" xyz="0 0 1.0"/>
    <inertia ixx="0.000001" ixy="0.000001" ixz="0.000001" iyy="0.000001" iyz="0.000001" izz="0.000001"/>
  </inertial> 
  <material name="camera_material"/>
</link>

<joint name="camera_joint" type="fixed">
  <parent link="drone"/>
  <child link="camera_link"/>
  <origin xyz="0 0 0.2" rpy="0 0 0"/>
  <axis xyz="1 0 0"/>
  <limit lower="-3.14159" upper="3.14159" effort="10" velocity="3.14159"/>
</joint>

  
<xacro:macro name="arm" params="i">
  <link name="arm${i}">
    <visual>
      <origin xyz="${cos((i-1)*pi/3+pi/6)*(frame_radius+arm_length/2)} ${sin((i-1)*pi/3+pi/6)*(frame_radius+arm_length/2)} ${(frame_height+2)/2-arm_radius}" rpy="0 ${pi/2} ${(i-1)*pi/3+pi/6}"/>
      <geometry>
        <cylinder radius="${arm_radius}" length="${arm_length}"/>
      </geometry>
      <material name="arm_material"/>
    </visual>
    <collision>
      <origin xyz="${cos((i-1)*pi/3+pi/6)*(frame_radius+arm_length/2)} ${sin((i-1)*pi/3+pi/6)*(frame_radius+arm_length/2)} ${(frame_height+2)/2-arm_radius}" rpy="0 ${pi/2} ${(i-1)*pi/3+pi/6}"/>
      <geometry>
        <cylinder radius="${arm_radius}" length="${arm_length}"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial radius="${arm_radius}" height="${arm_length}" mass="${arm_mass}">
      <origin xyz="${cos((i-1)*pi/3+pi/6)*(frame_radius+arm_length/2)} ${sin((i-1)*pi/3+pi/6)*(frame_radius+arm_length/2)} ${(frame_height+2)/2-arm_radius}" rpy="0 ${pi/2} ${(i-1)*pi/3+pi/6}"/>
    </xacro:cylinder_inertial>
  </link>
<joint name="frame_arm${i}" type="fixed">
  <parent link="drone"/>
  <child link="arm${i}"/>
</joint>  
    <gazebo reference="arm${i}">
      <material>Gazebo/Blue</material>
    </gazebo>
</xacro:macro> 


  
<xacro:macro name="propeller" params="i mat">
  <link name="propeller${i}">
    <visual>
      <origin xyz="0 0 1" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${propeller_radius}" length="${propeller_height}"/>
      </geometry>
      <material name="propeller_material"/>
    </visual>
    <collision>
      <origin xyz="0 0 1" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="${propeller_radius}" length="${propeller_height}"/>
      </geometry>
    </collision>
    <xacro:cylinder_inertial radius="${propeller_radius}" height="${propeller_height}" mass="${propeller_mass}">
      <origin xyz="0 0 1" rpy="0 0 0"/>
    </xacro:cylinder_inertial>
  </link>
<joint name="arm${i}_propeller${i}" type="revolute">
  <parent link="arm${i}"/>
  <child link="propeller${i}"/>
  <origin xyz="${cos((i-1)*pi/3+pi/6)*(frame_radius+arm_length)} ${sin((i-1)*pi/3+pi/6)*(frame_radius+arm_length)} ${frame_height/2-arm_radius+propeller_height_offset}" rpy="0 0 0"/>
  <axis xyz="1 0 0"/>
  <limit lower="0" upper="0" effort="0" velocity="0"/>
</joint>
    <gazebo reference="propeller${i}">
      <material>${mat}</material>
    </gazebo>
</xacro:macro> 



<!-- Xacro -->
<xacro:arm i="1"/>
<xacro:arm i="2"/>
<xacro:arm i="3"/>
<xacro:arm i="4"/>
<xacro:arm i="5"/>
<xacro:arm i="6"/>

<xacro:propeller i="1" mat="Gazebo/RedTransparent"/>
<xacro:propeller i="2" mat="Gazebo/BlackTransparent"/>
<xacro:propeller i="3" mat="Gazebo/BlueTransparent"/>
<xacro:propeller i="4" mat="Gazebo/BlueTransparent"/>
<xacro:propeller i="5" mat="Gazebo/BlackTransparent"/>
<xacro:propeller i="6" mat="Gazebo/RedTransparent"/>
    

  <!-- materials-->

<gazebo reference="drone">
  <material>Gazebo/Orange</material>
</gazebo>


<gazebo reference="depth_camera">
  <material>Gazebo/Yellow</material>
</gazebo>

<material name="frame_material">
  <color rgba="1 0.8 0.8 1"/>
</material>

<material name="arm_material">
  <color rgba="0.8 0.8 0.8 1"/>
</material>

<material name="propeller_material">
  <color rgba="0 0 0 0.6"/>
</material>

<material name="camera_material">
  <color rgba="1 0 0 0.6"/>
</material>



<!-- Plugins -->

<!-- Z Controller -->
<gazebo>
    <plugin name="drone_plugin" filename="libdrone_plugin.so">
      <updateRate>20</updateRate>
    </plugin>
  </gazebo>


<!-- X-Y Controller -->
<gazebo>
  <plugin name="object_controller" filename="libgazebo_ros_planar_move.so">
    <commandTopic>cmd_vel</commandTopic>
    <odometryTopic>odom</odometryTopic>
    <odometryFrame>odom</odometryFrame>
    <odometryRate>20.0</odometryRate>
    <robotBaseFrame>drone</robotBaseFrame>
  </plugin>
</gazebo>

 <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
     <!-- <robotNamespace>/robot</robotNamespace> -->
      <legacyModeNS>true</legacyModeNS>
    </plugin>
  </gazebo>


  <gazebo reference="camera_link">
   <sensor name="camera" type="depth">
        <update_rate>20</update_rate>
        <camera>
          <horizontal_fov>1.047198</horizontal_fov>
          <image>
            <width>80</width>
            <height>60</height>
            <format>R8G8B8</format>
          </image>
          <clip>
            <near>0.05</near>
            <far>3</far>
          </clip>
        </camera>
         <plugin name="camera_plugin" filename="libgazebo_ros_openni_kinect.so">
          <baseline>0.2</baseline>
          <alwaysOn>true</alwaysOn>
          <!-- Keep this zero, update_rate in the parent <sensor> tag
            will control the frame rate. -->
          <updateRate>0.0</updateRate>
          <cameraName>camera_ir</cameraName>
          <imageTopicName>/camera/color/image_raw</imageTopicName>
          <cameraInfoTopicName>/camera/color/camera_info</cameraInfoTopicName>
          <depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
          <depthImageCameraInfoTopicName>/camera/depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
          <frameName>camera_link</frameName>
          <pointCloudCutoff>0.5</pointCloudCutoff>
          <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
          <distortionK1>0</distortionK1>
          <distortionK2>0</distortionK2>
          <distortionK3>0</distortionK3>
          <distortionT1>0</distortionT1>
          <distortionT2>0</distortionT2>
          <CxPrime>0</CxPrime>
          <Cx>0</Cx>
          <Cy>0</Cy>
          <focalLength>0</focalLength>
          <hackBaseline>0</hackBaseline>
        </plugin>
      </sensor>
      </gazebo> 

  <!-- camera -->
  <gazebo reference="camera_link">
    <sensor type="camera" name="camera1">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>800</width>
          <height>800</height>
          <format>R8G8B8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>300</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>robot/camera1</cameraName>
        <imageTopicName>/robot/camera1/image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_link</frameName>
        <hackBaseline>0.07</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
  </gazebo>



</robot>
